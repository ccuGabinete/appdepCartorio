ngOnInit() {
  this.abertura = new Abertura();
  this.lacre = new Lacre();
  this.auto = new Auto();
  this.atendimento = new Atendimento();
}

changeEvent() {
  this.submitButton.focus();
}

openSnackBarCampos() {
  const config = new MatSnackBarConfig();
  config.duration = 5000;
  config.verticalPosition = 'top';
  this._snackBar.openFromComponent(AvisocamposComponent, config);
}

testaCampo(): boolean {
  let response: boolean;

  if (
    typeof this.abertura.autorizado !== 'undefined' ||
    typeof this.abertura.bairro !== 'undefined' ||
    typeof this.abertura.cep !== 'undefined' ||
    typeof this.abertura.cpf !== 'undefined' ||
    typeof this.abertura.endereco !== 'undefined' ||
    typeof this.abertura.estadocivil !== 'undefined' ||
    typeof this.abertura.expedicao !== 'undefined' ||
    typeof this.abertura.identidade !== 'undefined' ||
    typeof this.abertura.itensdiscriminados !== 'undefined' ||
    typeof this.abertura.localapreensao !== 'undefined' ||
    typeof this.abertura.matricula !== 'undefined' ||
    typeof this.abertura.municipio !== 'undefined' ||
    typeof this.abertura.nacionalidade !== 'undefined' ||
    typeof this.abertura.nome !== 'undefined' ||
    typeof this.abertura.numero !== 'undefined' ||
    typeof this.abertura.processo !== 'undefined'

  ) {
    response = true;
  } else {
    response = false;
  }
  return response;

}

 public handleAddressChange(address: any) {
  this.abertura.localapreensao = address.address_components[0].long_name;
}

public handleAddressChangeCep(address: any) {
  // tslint:disable-next-line: prefer-const
  let cep = address.address_components[0].long_name;
  this.buscacepService.buscarCEP(cep).subscribe(data => {
    this.abertura.cep = data.body.cep;
    this.abertura.endereco = data.body.logradouro;
    this.abertura.municipio = data.body.localidade;
    this.abertura.bairro = data.body.bairro;
  });
}

onIdentidade() {
  this.aberturaservice.correnteAbertura.subscribe(abertura => {
    this.abertura.cpf = abertura.cpf;
    this.abertura.nome = abertura.nome;
    this.abertura.agenterespcadastro = abertura.agenterespcadastro;
    this.abertura.autorizado = abertura.autorizado;
    this.abertura.processo = abertura.processo;
    this.abertura.matricula = abertura.matricula;
  });
}

onEmail() {
  this.abertura.telcelular = this.telcelformatado;
  this.abertura.telresidencial = this.telcelformatado;
}

onAuto() {
  if (typeof this.abertura.autodeapreensao !== 'undefined') {
    this.buscarauto.buscarAuto(this.abertura.autodeapreensao).subscribe(data => {

      console.log(data.body);

      // Se esse auto não retornar posição, significa que o mesmo
      // não deu entrada pelo plantão fiscal e esse auto ainda não foi cadastrado
      // logo sua posição será atualizada para 0000

      // Como ele não entrada ainda, o seu número será confirmado pelo número digitado
      // na input de auto de apreensão
      //

      (data.body.pos === '') ? this.auto.pos = '0000' : this.auto.pos = data.body.pos;
      (data.body.numero === '') ? this.auto.numero = this.abertura.autodeapreensao : this.auto.numero = data.body.numero;


      if (data.body.pos !== '') {
        // tslint:disable-next-line: no-shadowed-variable
        this.buscalacre.buscarPosicao(this.auto.pos).subscribe(data => {
          this.populaLacre(data);
          this.listaAutos.push({ autodeapreensao: this.auto.numero, pos: this.auto.pos });
          this.abertura.autodeapreensao = '';
        });
      } else {
        this.listaAutos.push({ autodeapreensao: this.abertura.autodeapreensao, pos: this.auto.pos });
        this.abertura.autodeapreensao = '';
      }

    });
  }
}

onLacre(val: string) {
  const tamanho = val.length;
  if (tamanho < 8) {
    for (let i = 0; i < (8 - tamanho); i++) {
      val = '0' + val;
    }
  }
  this.objlacre = val;
  this.buscalacre.buscarLacre(this.objlacre).subscribe(data => {
    if (typeof data.body.response !== 'undefined') {
      const response = this.formataLacreString(data.body, this.objlacre);
      this.populaLacre(response);
    } else {
      const response = this.objlacre + '(07;' + this.gerardata.gerarData(true) + ';aaaa)';
      this.populaLacre(response);
    }

  });
}

onFocusLacre() {
  this.objlacre = '';
}

onFocusAuto() {
  this.abertura.autodeapreensao = '';
}

onDeletar(obj) {
  const index = this.listalacres.findIndex(lacre => lacre.id === obj.id);
  this.listalacres.splice(index, 1);
}

// popula o array this.listalacres
// recebe o array resposta da função buscaLacre e /
// da função buscarPosição do serviço buscalacre.service

populaLacre(data: any) {
  let obj = {};
  if (typeof data.body !== 'undefined') {
    data.body.forEach(dt => {
      dt.processo = this.abertura.processo;
      this.listalacres.push(dt);
    });
  } else {
    if (typeof this.auto.pos !== 'undefined') {
      obj = {
        atualizado: this.gerardata.gerarData(true),
        id: this.objlacre,
        pos: this.auto.pos,
        status: '07',
        processo: this.abertura.processo,
      };
    } else {
      this.auto.pos = '0000';
      obj = {
        atualizado: this.gerardata.gerarData(true),
        id: this.objlacre,
        pos: this.auto.pos,
        status: '07',
        processo: this.abertura.processo
      };
    }

    this.listalacres.push(obj);
  }

}

onTRM() {
  const tamanho = this.abertura.trm.length;
  let str = this.abertura.trm;
  if (tamanho < 8) {
    for (let i = 0; i < (8 - tamanho); i++) {
      str = '0' + str;
    }
  }
  this.abertura.trm = str;
  this.listaTRM.push(str);
  this.abertura.trm = '';
}

onFocusTRM() {
  this.abertura.trm = '';
}

ngOnDestroy(): void {
  this.serviceCampos.mudarAviso(1);
}

onDeletarTRM(trm: string) {
  const index = this.listaTRM.indexOf(trm);
  this.listaTRM.splice(index, 1);
}

onDeletarAuto(auto: Auto) {
  const index = this.listaTRM.findIndex(x => x.autodeapreensao === auto.numero);
  this.listaAutos.splice(index, 1);

  const filterLacre = (lacre) => {
    return lacre.pos !== auto.pos;
  };

  this.listalacres = this.listalacres.filter(filterLacre);
}

onComprobatorio() {
  this.listaAutos = [];
  this.listaTRM = [];
  this.listalacres = [];
  this.objlacre = '';
}

populaListas() {
  this.abertura.listalacres = '';
  this.abertura.listaautos = '';
  this.abertura.listatrms = this.listaTRM.toString();

  this.listalacres.forEach((lacre, pos, array) => {
    if (pos !== array.length - 1) {
      this.abertura.listalacres += lacre.id + ' - ';
    } else {
      this.abertura.listalacres += lacre.id;
    }
  });

  this.listaAutos.forEach((auto, pos, array) => {
    if (pos !== array.length - 1) {
      this.abertura.listaautos += auto.autodeapreensao + ' - ';
    } else {
      this.abertura.listaautos += auto.autodeapreensao;
    }
  });

}

onSubmit() {
  // aqui é a parte mais importante
  // não posso esquecer que é aqyui que preparo
  // o array de lacres para salvar ou atualizar o db
  const arrPosicoes = this.criaArrayPosicao();
  this.enviaRecursiva(arrPosicoes);

  // if (this.testaCampo()) {
  //   if (
  //     typeof this.abertura.complemento === 'undefined'
  //     || typeof this.abertura.telcelular === 'undefined'
  //     || typeof this.abertura.telresidencial === 'undefined'
  //     || typeof this.abertura.email === 'undefined'
  //   ) {
  //     this.abertura.complemento = '';
  //     this.abertura.telcelular = '';
  //     this.abertura.telresidencial = '';
  //     this.abertura.email = '';
  //   }
  //   this.populaListas();
  //   this.abertura.dataapreensao = this.gerardata.gerarMomentData(this.dataapreensao);
  //   this.abertura.dataexpedicao = this.gerardata.gerarMomentData(this.dataexpedicao);
  //   this.pdfservice.downloadPDF(this.abertura);
  // } else {
  //   this.serviceCampos.mudarAviso(2);
  //   this.openSnackBarCampos();
  // }

}


// converte o array resposta vinda do servidor em um um array de objetos tipo Lacre
formataLacreString(linhas: any, numero: string) {
  // tslint:disable-next-line: prefer-const
  let arr = [];
  if (linhas.length > 0) {
    linhas.forEach((linha, idlinha) => {
      const aux = linha.lacre.split(',');
      aux.forEach((lacre, idcoluna) => {
        const obj = {};
        obj['data'] = linha.data;
        obj['linha'] = idlinha;
        obj['coluna'] = idcoluna;
        obj['id'] = lacre.substring(0, 8);
        obj['status'] = lacre.substring(9, 11);
        obj['atualizado'] = lacre.substring(12, 20);
        obj['pos'] = linha.pos;
        arr.push(obj);
      });
    });

    // tslint:disable-next-line: no-shadowed-variable
    const filter = value => {
      return value.id === numero;
    };

    const resp = arr.filter(filter);
    return resp;
  }

}

// Essa função cria o objeto Lacre que será enviado a planilha lacre
// para o caso de salvamento ou de atualização
criaLacreString(arr: any) {
  // tslint:disable-next-line: prefer-const
  let lc = new Lacre();
  lc.lacre = '';
  arr.forEach((l, a, b) => {
    if (a !== b.length - 1) {
      lc.lacre += l.id + '(07;' + this.gerardata.gerarData(true) + ';aaaa)' + ',';
    } else {
      lc.lacre += l.id + '(07;' + this.gerardata.gerarData(true) + ';aaaa)';
    }

    // o npumero do trm é indispensável para o bom funcionamento
    // do algoritmo que busca as posições do processo e do lacre para atualizar
    // sendo assim não pode ficar em branco

    lc.pos = l.pos;
    if (typeof this.abertura.trm !== 'undefined') {
      // Uso a função populaListas() para preencher a tag ul li
      // que apresenta os TRMs apresentados pelo requerente
      this.populaListas();
      lc.trm = this.listaTRM.toString();
    } else {
      lc.trm = '0';
    }
  });

  lc.data = this.gerardata.gerarDataHora(Date.now());
  lc.processo = this.fomataProcesso(this.abertura.processo.toString());
  lc.auto = this.auto.numero;

  return lc;
}

// precisei criar esse array de poições para o caso de haver mais de um alto de apreensão;
// nesse caso, será preciso fazer um foreach para salvar ou atualizar o lacre no db
// Esse retorno deverá ser usado na função enviarRecursiva

criaArrayPosicao() {
  // tslint:disable-next-line: prefer-const
  let arr = [];
  // tslint:disable-next-line: prefer-const
  let arrEnvio = [];
  const arrResponse = [];
  this.listalacres.forEach(t => {
    if (arr.indexOf(t.pos) === -1) {
      arr.push(t.pos);
    }
  });

  arr.forEach(t => {
    // tslint:disable-next-line: prefer-const
    let response = this.listalacres.filter((value) => {
      return value.pos === t;
    });
    arrEnvio.push(response);
  });

  arrEnvio.forEach(t => {
    arrResponse.push(this.criaLacreString(t));
  });

  return arrResponse;
}

enviaRecursiva(arr: Array<Lacre>) {
  // tslint:disable-next-line: prefer-const
  let len = arr.length;

  if (arr[0].pos === '0000') {
    this.onSalvarLacre(arr[0]);
  } else {
    console.log(this.listalacres);
  }

}

onSalvarLacre(lacre: Lacre) {
  this.salvarlacre.salvarLacre(lacre).subscribe(data => {
  });
}

fomataProcesso(p: string) {
  return p.substring(0, 4) + '/' + p.substring(4, 10) + '/' + p.substring(10);
}

